<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.pbkhyglszy.gymnastics_manager.mapper.ScoreMapper">
    <resultMap id="ScoreResultMap" type="Test">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="value" jdbcType="VARCHAR" property="value"/>
    </resultMap>
    <!--根据用户名密码查询用户信息-->
    <!--application.yml 中通过 type-aliases-package 指定了实体类的为了，因此-->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into referee_score (score, status, group_id, athlete_id, referee_id)
        values (#{score}, #{status}, #{groupId}, #{athleteId}, #{refereeId})
    </insert>

    <delete id="delete">
        delete
        from referee_score
        where id = #{id}
    </delete>

    <select id="getRSId" resultType="java.lang.Integer">
        select id
        from referee_score
        where group_id = #{groupId}
          and referee_id = #{refereeId}
    </select>

    <select id="getStatus" resultType="java.lang.Boolean">
        select status
        from referee_score
        where group_id = #{groupId}
          and referee_id = #{refereeId}
    </select>

    <select id="getAllRSByGroup" resultType="RefereeScore">
        select *
        from referee_score
        where group_id = #{groupId}
    </select>

    <select id="getAllRSByIds" resultType="RefereeScore">
        select *
        from referee_score
        where
        <choose>
            <when test="list.size() > 0">
                group_id in
                <foreach collection="list" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </when>
            <otherwise>
                1 = 0
            </otherwise>
        </choose>
    </select>

    <update id="update">
        update referee_score
        set score      = #{score},
            status     = #{status},
            group_id   = #{groupId},
            athlete_id = #{athleteId},
            referee_id = #{refereeId}
        where id = #{id}
    </update>

    <select id="isAllPassed" resultType="java.lang.Boolean">
        select (select count(id)
                from referee_score
                where group_id = #{groupId}
                  and status = 1) = (select count(id)
                                     from referee_score
                                     where group_id = #{groupId})
    </select>

    <select id="getAllAthleteId" resultType="java.lang.Integer">
        select athlete_id
        from group_athlete
        where group_id = #{groupId}
    </select>

    <select id="calculateFS" resultType="java.lang.Double">
        select avg(score)
        from referee_score
        where group_id = #{groupId}
          and athlete_id = #{athleteId}
    </select>

    <insert id="addAllFS" useGeneratedKeys="true" keyProperty="id">
        insert into final_score (score, athlete_id, group_id)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.score}, #{item.athleteId}, #{item.groupId})
        </foreach>
    </insert>

    <select id="getAllFSByGroup" resultType="FinalScore">
        select *
        from final_score
        where group_id = #{groupId}
        order by score desc
    </select>

    <select id="getAllFSByIds" resultType="FinalScore">
        select *
        from final_score
        where
        <choose>
            <when test="list.size() > 0">
                group_id in
                <foreach collection="list" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </when>
            <otherwise>
                1 = 0
            </otherwise>
        </choose>
    </select>

    <select id="getAllFSByCompetition" resultType="FinalScore">
        select *
        from final_score
        where group_id = (select id
                          from `group`
                          where competition_id = #{competitionId})
        order by score desc
    </select>

</mapper>
